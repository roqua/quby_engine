- insert = nil
- subq = question.options.last.questions.first
- if subq.andand.presentation == :next_to_title and subq.type == :string
  -insert = render :partial => "quby/answers/shared/inline_text_field", :locals => {:answer => @answer, :question => subq}
= marukufix(question.title, "answer_#{question.key}", insert)
- show_values = (question.show_values == true or question.show_values == :all or question.show_values == :paged)

.description-and-fields
  .description
    - unless question.description.blank?
      :markdown
        #{raw question.description}
  - cls = []
  - cls << "options#{question.options.size}" unless question.presentation == :horizontal
  .fields{:id => question.html_id, :class =>cls}
    %table(cellspacing=0 border=0)
      %tr
        - question.options.each_with_index do |opt, idx|
          - checked = @answer.send(question.key) == opt.key.to_s
          - next if (opt.hidden and not checked)
          - cls = []
          - cls << "first" if idx <= 0
          - cls << "last" if idx >= (question.options.size - 1)
          - cls << "optionwidth#{question.options.size}"
          %td.option{:class => cls, :for => question.key}
            - if show_values
              %span.value= opt.value
              %br/
            %span
              - cls = [question.type]
              - cls << "subinput" if subquestion
              - cls << "deselectable" if question.deselectable
              = radio_button(:answer, question.key, opt.key, {:class => cls, :disabled => disabled ? "" : nil})
              %br/
              %label(for="answer_#{question.key}_#{opt.key}")
                %span
                  :markdown
                    #{raw opt.description}
        = radio_button_tag(question.key, "DESELECTED_RADIO_VALUE", false, :class => "hidden", :name => "answer[#{question.key}]")

