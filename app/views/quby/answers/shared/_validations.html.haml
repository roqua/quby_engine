- question.validations.each do |validation|
  - exp_classes = ["error", validation[:type]]
  - valtypes = answer.errors[question.key].collect{|e| e[:valtype]}
  - unless valtypes.include?(validation[:type])
    - exp_classes << "hidden" 
  - case validation[:type]
  - when :maximum
    %div{:class => exp_classes}= validation[:explanation] || "Uw antwoord moet een getal kleiner dan of gelijk aan #{validation[:value]} zijn." 
  - when :minimum
    %div{:class => exp_classes}= validation[:explanation] || "Uw antwoord moet een getal groter dan of gelijk aan #{validation[:value]} zijn."
  - when :requires_answer
    %div{:class => exp_classes}= validation[:explanation] || "Deze vraag moet beantwoord worden."
  - when :regexp
    %div{:class => exp_classes}= validation[:explanation] || "Uw antwoord moet voldoen aan de vorm #{validation[:matcher]}."
  - when :valid_integer
    %div{:class => exp_classes}= validation[:explanation] || "Uw antwoord moet een afgerond getal zijn."
  - when :valid_float
    %div{:class => exp_classes}= validation[:explanation] || "Uw antwoord moet een getal zijn (gebruik een decimale punt voor kommagetallen)."
  - when :too_many_checked
    %div{:class => exp_classes}= validation[:explanation] || "U heeft te veel opties gekozen."
  - when :not_all_checked
    %div{:class => exp_classes}= validation[:explanation] || "U heeft te weinig opties gekozen."
  - when :answer_group_minimum
    %div{:class => exp_classes}= validation[:explanation] || "Beantwoord minstens #{validation[:value]} van deze vragen"
  - when :answer_group_maximum
    %div{:class => exp_classes}= validation[:explanation] || "Beantwoord hoogstens #{validation[:value]} van deze vragen"
  - else
    %strong
      Error: unknown validation type
      = validation[:type]
      