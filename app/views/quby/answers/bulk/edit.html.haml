:coffeescript
  @panel_validations = {}
  #for setting values of raw_content
  @extra_question_values = #{@answer.extra_question_values}
  #for showing validations of raw content
  @extra_failed_validations = #{@answer.extra_failed_validations}

- content_for(:page_title, @questionnaire.title)
- content_for(:extra_css, @questionnaire.extra_css)
    
- data = {}
- data[:"log-activity"] = "#answer_activity_log" if @questionnaire.log_user_activity
= form_tag questionnaire_answer_path(@questionnaire, @answer), :method => :put, :class => [@questionnaire.key, "bulk"].join(" "), :autocomplete => "off", :data => data do
  = render :partial => "quby/answers/session_params"
  - if not @answer.errors.empty?
    .force-submit
      %h1 Deze vragenlijst is nog niet volledig ingevuld!
      %p Als u de vragenlijst toch opslaat, kan het zijn dat er geen schaalscores berekend worden omdat hiervoor onvoldoende informatie voorhanden is. U kunt uw antwoorden hieronder alsnog aanvullen. Vragen die nog niet volledig zijn beantwoord, worden rood gemarkeerd.
      = submit_tag "Toch opslaan"

  = render :partial => "quby/answers/hotkey_dialog"
  - all_items = @questionnaire.panels.map(&:items).flatten
  - previous_item = nil
  
  - @questionnaire.panels.each_with_index do |panel, panel_counter|
    - panel_id = "panel#{panel_counter}"
    %fieldset{:id => panel_id, :class => "panel"}
      :javascript
        panel_validations["panel#{panel_counter}"] = #{get_validation_json(panel.validations)};
      = render :partial => 'quby/answers/shared/backbone_panel', :locals => {:panel => panel, |
                                                                 :panel_id => panel_id, |
                                                                 :answer => @answer} |
      - if panel.title
        %h1&= panel.title

      - panel.items.each_with_index do |item, idx|
        - next_item = all_items[all_items.index(item)]
        = render :partial => "quby/answers/bulk/item", :object => item, :locals => { :item_counter => idx, :items => panel.items, :previous_item => previous_item, :next_item => next_item }
        - previous_item = item if item.class.name == "Quby::Items::Question"
  .buttons
    - if @questionnaire.enable_previous_questionnaire_button
      .back
        = submit_tag raw("&larr; Vorige vragenlijst"), :id => "back"
    .prev &nbsp;
    .save
      = submit_tag "Klaar", :id => "done-button"
    .print
      %a.print_button{:onclick => raw("doDivPrint('#{print_questionnaire_answer_path(@questionnaire, @answer)}'); return false;")}
        = image_tag "quby/print.gif"
        Print Antwoorden

:coffeescript
  $ ->
    Quby.questions.trigger "initShowsHides"

= render :partial => "quby/answers/modal_iframe"
