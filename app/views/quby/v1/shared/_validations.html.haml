-# frozen_string_literal: true
- question.validations.each do |validation|
  - exp_classes = ["error", validation[:type], validation[:subtype]].compact
  - valtypes = answer.errors[question.key].collect{|e| e[:valtype]}
  - unless valtypes.include?(validation[:type])
    - exp_classes << "hidden"
  - translate_options = case validation[:type]
  - when :requires_answer, :valid_integer, :valid_float, :valid_date, :too_many_checked, :not_all_checked
    - {}
  - when :maximum, :minimum, :answer_group_minimum, :answer_group_maximum
    - if validation[:subtype] == :date
      - {value: validation[:value], friendly_date: I18n.l(validation[:value], format: :friendly_date)}
    - else
      - {value: validation[:value]}
  - when :regexp
    - {matcher: validation[:matcher]}
  - when :maximum_checked_allowed
    - {count: validation[:maximum_checked_value], maximum_checked_value: validation[:maximum_checked_value]}
  - when :minimum_checked_required
    - {count: validation[:minimum_checked_value], minimum_checked_value: validation[:minimum_checked_value]}
  - else
    %strong
      Error: unknown validation type
      = validation[:type]
  - validation_text = validation[:explanation]
  - validation_text ||= translate("validations.#{validation[:type]}.#{validation[:subtype]}", translate_options)
  %div{:class => exp_classes}= validation_text
