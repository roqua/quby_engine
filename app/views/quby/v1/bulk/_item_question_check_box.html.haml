%label.main(for="answer_#{question.key}")
  = render :partial => "quby/v1/shared/main_label", :locals => {:question => question}
  - subq = question.options.last.questions.first
  - if subq.andand.presentation == :next_to_title and subq.type == :string
    = render :partial => "quby/v1/shared/inline_text_field", :locals => {:answer => @answer, :question => subq}
.description-and-fields
  .description
    - unless question.description.blank?
      :markdown
        #{raw question.description}
  .fields{:id => question.html_id, :class => "options#{question.options.size}"}
    - question.options.each do |opt|
      - next if opt.inner_title
      - checked = @answer.send(opt.key) == 1
      - next if( opt.hidden and not checked)
      - cls = ["optionwidth#{question.options.size}"]
      - cls << "show_values" if question.show_values_in_mode? :bulk
      .option{ :for => question.key, :class => cls}
        .radiocheckwrapper
          - if question.uncheck_all_option == opt.key
            -attrs = {:onClick => "setAllCheckboxes(this.checked, '#{question.check_all_option}', '#{question.uncheck_all_option}', '#{question.key}', false); handleDisableCheckboxSubQuestions(this);", :class => subquestion ? "subinput" : ""}
          - elsif question.check_all_option == opt.key
            -attrs = {:onClick => "setAllCheckboxes(this.checked, '#{question.check_all_option}', '#{question.uncheck_all_option}', '#{question.key}', true); handleDisableCheckboxSubQuestions(this);", :class => subquestion ? "subinput" : ""}
          - else
            -attrs = {:onClick => "correctAllNothingCheckboxes(this.checked, '#{question.check_all_option}', '#{question.uncheck_all_option}'); handleDisableCheckboxSubQuestions(this);", :class => subquestion ? "subinput" : ""}
          -if disabled
            -attrs[:disabled] = ""
          = check_box(:answer, "#{opt.key}", attrs)
        - if question.show_values_in_mode? :bulk
          .value= opt.value
        .labelwrapper
          %label{for: opt.view_id}
            %span
              :markdown
                #{raw opt.description}
        - unless opt.questions.empty?
          .subquestions= render :partial => "quby/v1/bulk/item", :collection => opt.questions,  :locals => {:subquestion => true, :disabled => !checked}
