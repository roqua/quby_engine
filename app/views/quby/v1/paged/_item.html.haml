/ Begin _item.html.haml
- subquestion ||= false
- disabled ||= false
- itemclasses = [item.type, item.presentation]
- extra_data = nil
- itemkey = nil
- if item.is_a? Quby::Questionnaires::Entities::Question
  - return if item.table
  - itemkey = "item_#{item.key}"
  - itemclasses << "errors" unless @answer.errors[item.key].empty?
  - if subquestion
    - itemclasses << 'subitem'
    - return if item.presentation == :next_to_title
  - itemclasses << item.question_group  if item.question_group
  - extra_data = item.extra_data
  - itemclasses << item.as if item.as

- if item.raw_content
  - if item.raw_content.is_a?(Hash) and item.raw_content[:paged]
    = raw item.raw_content[:paged]
  - else
    = raw item.raw_content
- else
  .item{:class => itemclasses, :data => extra_data, :id => itemkey}
    - case item
    - when Quby::Questionnaires::Entities::Text
      -if item.display_in&.include?(:paged)
        .text
          :markdown
            #{raw(item)}
    - when Quby::Questionnaires::Entities::Questions::StringQuestion
      - return if (item.hidden?) and @answer.send(item.key).blank?
      - return if (item.display_modes and (not item.display_modes.include?(:paged)))
      = render :partial => 'quby/v1/shared/validations', :locals => {:question => item, :answer => @answer}
      = render :partial => "quby/v1/paged/item_question_string", :locals => {:question => item, :subquestion => subquestion, :disabled => disabled}
    - when Quby::Questionnaires::Entities::Questions::TextQuestion
      - return if (item.hidden?) and @answer.send(item.key).blank?
      - return if (item.display_modes and (not item.display_modes.include?(:paged)))
      = render :partial => 'quby/v1/shared/validations', :locals => {:question => item, :answer => @answer}
      = render :partial => "quby/v1/paged/item_question_textarea", :locals => {:question => item, :subquestion => subquestion, :disabled => disabled}
    - when Quby::Questionnaires::Entities::Questions::IntegerQuestion, Quby::Questionnaires::Entities::Questions::FloatQuestion
      - return if (item.hidden?) and @answer.send(item.key).blank?
      - return if (item.display_modes and (not item.display_modes.include?(:paged)))
      = render :partial => 'quby/v1/shared/validations', :locals => {:question => item, :answer => @answer}
      = render :partial => "quby/v1/paged/item_question_number", :locals => {:question => item, :subquestion => subquestion, :disabled => disabled}
    - when Quby::Questionnaires::Entities::Questions::RadioQuestion
      - return if (item.hidden?) and @answer.send(item.key).blank?
      - return if (item.display_modes and (not item.display_modes.include?(:paged)))
      = render :partial => 'quby/v1/shared/validations', :locals => {:question => item, :answer => @answer}
      - case item.type
      - when :radio
        = render :partial => "quby/v1/paged/item_question_radio", :locals => {:question => item, :subquestion => subquestion, :disabled => disabled}
      - when :scale
        = render :partial => "quby/v1/paged/item_question_scale", :locals => {:question => item, :subquestion => subquestion, :disabled => disabled}
    - when Quby::Questionnaires::Entities::Questions::DateQuestion
      - return if (item.hidden?) and @answer.send(item.key).blank?
      - return if (item.display_modes and (not item.display_modes.include?(:paged)))
      = render :partial => 'quby/v1/shared/validations', :locals => {:question => item, :answer => @answer}
      = render :partial => "quby/v1/paged/item_question_date", :locals => {:question => item, :subquestion => subquestion, :disabled => disabled}
    - when Quby::Questionnaires::Entities::Questions::CheckboxQuestion
      - return if (item.hidden?) and @answer.send(item.key).blank?
      - return if (item.display_modes and (not item.display_modes.include?(:paged)))
      = render :partial => 'quby/v1/shared/validations', :locals => {:question => item, :answer => @answer}
      = render :partial => "quby/v1/paged/item_question_check_box", :locals => {:question => item, :subquestion => subquestion, :disabled => disabled}
    - when Quby::Questionnaires::Entities::Questions::DeprecatedQuestion
      - # nothing rendered
    - when Quby::Questionnaires::Entities::Questions::SelectQuestion
      - return if (item.hidden?) and @answer.send(item.key).blank?
      - return if (item.display_modes and (not item.display_modes.include?(:paged)))
      = render :partial => 'quby/v1/shared/validations', :locals => {:question => item, :answer => @answer}
      = render :partial => "quby/v1/paged/item_question_select", :locals => {:question => item, :subquestion => subquestion, :disabled => disabled}
    - when Quby::Questionnaires::Entities::Table
      = render :partial => "quby/v1/table/table", :locals => {:table => item}
    - else
      - raise Quby::Questionnaires::Entities::Questionnaire::ValidationError, "Unknown item type #{item.class.name} for question #{item.key}"
/ End _item.html.haml
